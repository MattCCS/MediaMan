"""
Monkey patch to allow offset downloads with the googleapiclient Python library.
"""

import time
import random
import six


def patch_googleapiclient_http():
    import googleapiclient._helpers as util
    import googleapiclient.http as http

    DEFAULT_CHUNK_SIZE = http.DEFAULT_CHUNK_SIZE

    # define the patched method
    @util.positional(3)
    def __init__(self, fd, request, chunksize=DEFAULT_CHUNK_SIZE, start=0):
        """
        Constructor.

        Args:
          fd: io.Base or file object, The stream in which to write the downloaded
            bytes.
          request: googleapiclient.http.HttpRequest, the media request to perform in
            chunks.
          chunksize: int, File will be downloaded in chunks of this many bytes.
        """
        self._fd = fd
        self._request = request
        self._uri = request.uri
        self._chunksize = chunksize
        self._progress = start
        self._total_size = None
        self._done = False

        # Stubs for testing.
        self._sleep = time.sleep
        self._rand = random.random

        self._headers = {}
        for k, v in six.iteritems(request.headers):
            # allow users to supply custom headers by setting them on the request
            # but strip out the ones that are set by default on requests generated by
            # API methods like Drive's files().get(fileId=...)
            if not k.lower() in ("accept", "accept-encoding", "user-agent"):
                self._headers[k] = v

    # apply the monkey patch
    http.MediaIoBaseDownload.__init__ = __init__
